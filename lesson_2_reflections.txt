1) What happens when you initialize a repository? Why do you need to do it?
--- Initializing a repository will create a .git metadata file that will then track all changes made to that repository. You need to do this so that you can use all the tools available to you in git and track the changes in your repository. 

2) How is the staging area different from the working directory and the repository? What value do you think it offers?
--- The staging area allows you to control exactly which files are committed to the repository that are in your working directory. It does not necessariy contain all the files in your working directory, and lets you have more control over the commits made to your git repository. 

3) How can you use the staging area to make sure you have one commit per logical change?
--- You can make sure to only GIT ADD the relevant files to the staging area that make logical sense for the commit. If you changed two files, but the changes are not logically similar, you can GIT ADD and GIT COMMIT the files at different times so the commits are kept logically separate. 

4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?
--- Branches would be helpful if you wanted to try some new features or make significant changes, without breaking or altering your code that already works. Branches allow people to experiment and try new things without worrying about causing issues with the main program or code.

5) How do the diagrams help you visualize the branch structure?
--- It helped me understand what is happening when you make commits or new branches, and how they relate to each other. 

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
--- Merging two branches together creates one branch with a shared commit history that stems from the two branches before they merged. We represent it in the diagram the way we do to visually show that the two branches merged into one, but the commit history is still based on the child-parent relationships of the commits for their respective branches.

